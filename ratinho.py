import streamlit as st
from collections import Counter

# FunÃ§Ã£o para normalizar uma sequÃªncia trocando ğŸ”´ e ğŸ”µ para um padrÃ£o genÃ©rico,
# mantendo empates ğŸŸ¡ fixos. Isso ajuda a identificar padrÃµes que sÃ£o a mesma estrutura
def normalizar_seq(seq):
    # Mapear cores para 0 e 1 (ex: ğŸ”´=0, ğŸ”µ=1), empates fixos (2)
    # para poder comparar inversÃµes
    mapping = {'ğŸ”´': 0, 'ğŸ”µ': 1, 'ğŸŸ¡': 2}
    normal = [mapping[c] for c in seq]

    # TambÃ©m criar inverso (troca 0<->1, 2 fica igual)
    inverso = [1 - x if x in (0,1) else x for x in normal]

    return normal, inverso

# FunÃ§Ã£o para verificar se duas sequÃªncias sÃ£o iguais
# considerando normal e inverso
def seq_igual(seq1, seq2):
    n1, i1 = normalizar_seq(seq1)
    n2, i2 = normalizar_seq(seq2)
    return n1 == n2 or n1 == i2

# FunÃ§Ã£o para buscar subpadrÃµes repetidos no histÃ³rico
def buscar_subpadroes(historico, min_len=3, max_len=9):
    n = len(historico)
    achados = []

    for tamanho in range(max_len, min_len-1, -1):
        if tamanho > n:
            continue
        # Criar todas as subsequÃªncias desse tamanho
        subseqs = []
        for start in range(n - tamanho +1):
            subseq = historico[start:start+tamanho]
            subseqs.append( (start, subseq) )
        # Comparar todas entre si para ver repetiÃ§Ãµes
        for i in range(len(subseqs)):
            start_i, seq_i = subseqs[i]
            for j in range(i+1, len(subseqs)):
                start_j, seq_j = subseqs[j]
                if seq_igual(seq_i, seq_j):
                    achados.append({
                        'tamanho': tamanho,
                        'pos1': start_i,
                        'seq1': seq_i,
                        'pos2': start_j,
                        'seq2': seq_j
                    })
        if achados:
            break
    return achados

# FunÃ§Ã£o para prever prÃ³xima jogada com base no padrÃ£o encontrado
def prever_proxima(historico, padrao):
    """
    padrao = dict com keys: tamanho, pos1, seq1, pos2, seq2
    A ideia Ã©: 
    - A sequÃªncia mais recente Ã© a seq1 em pos1
    - Ver a jogada seguinte apÃ³s seq2 em pos2 (se existir)
    """
    pos2 = padrao['pos2']
    tamanho = padrao['tamanho']
    historico_len = len(historico)

    prox_pos = pos2 + tamanho
    if prox_pos >= historico_len:
        return None  # NÃ£o hÃ¡ prÃ³xima jogada conhecida

    jogada_apos = historico[prox_pos]

    # Agora Ã© importante saber se a sequÃªncia seq1 foi invertida em relaÃ§Ã£o a seq2,
    # para inverter a jogada_apos tambÃ©m.

    n1, i1 = normalizar_seq(padrao['seq1'])
    n2, i2 = normalizar_seq(padrao['seq2'])

    # Se seq1 Ã© inverso de seq2, inverter jogada_apos
    if n1 == i2:
        # inverter jogada_apos: ğŸ”´ <-> ğŸ”µ, ğŸŸ¡ fica igual
        if jogada_apos == 'ğŸ”´':
            jogada_apos = 'ğŸ”µ'
        elif jogada_apos == 'ğŸ”µ':
            jogada_apos = 'ğŸ”´'

    return jogada_apos

# FunÃ§Ã£o principal que roda anÃ¡lise e previsÃ£o
def analisar_historico(historico):
    achados = buscar_subpadroes(historico)
    if not achados:
        return None, "Nenhum padrÃ£o repetido detectado."

    # Pegar o melhor padrÃ£o (maior tamanho)
    melhor = max(achados, key=lambda x: x['tamanho'])
    prox_jogada = prever_proxima(historico, melhor)

    if prox_jogada is None:
        return None, "PadrÃ£o encontrado, mas nÃ£o foi possÃ­vel prever prÃ³xima jogada (limite histÃ³rico)."

    texto = (f"PadrÃ£o detectado: sequÃªncia de tamanho {melhor['tamanho']} "
             f"repetida nas posiÃ§Ãµes {melhor['pos1']+1} e {melhor['pos2']+1}.\n"
             f"SugestÃ£o baseada na repetiÃ§Ã£o estrutural com possÃ­vel inversÃ£o.")
    return prox_jogada, texto

# ---------------- STREAMLIT ------------------

def main():
    st.title("FS Pattern Auto-ID & Prediction")

    st.write("Informe o histÃ³rico (mÃ¡ximo 27) na ordem correta: mais recente Ã  esquerda.")
    st.write("Use os emojis ğŸ”´ ğŸ”µ ğŸŸ¡ separados por espaÃ§o.")

    raw = st.text_input("HistÃ³rico:", "")

    if raw:
        historico = raw.strip().split()
        if len(historico) < 9:
            st.warning("HistÃ³rico deve conter pelo menos 9 resultados.")
            return
        if len(historico) > 27:
            historico = historico[:27]

        st.write("### HistÃ³rico (mais recente â†’ mais antigo):")
        st.write(" ".join(historico))

        jogada, justificativa = analisar_historico(historico)
        if jogada is None:
            st.info(justificativa)
        else:
            st.markdown(f"### PrÃ³xima jogada prevista: {jogada}")
            st.info(justificativa)

if __name__ == "__main__":
    main()
